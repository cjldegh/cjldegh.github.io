<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>List集合的Stream流处理</title>
    <link href="/2022/11/10/List%E9%9B%86%E5%90%88%E7%9A%84Stream%E6%B5%81%E5%A4%84%E7%90%86/"/>
    <url>/2022/11/10/List%E9%9B%86%E5%90%88%E7%9A%84Stream%E6%B5%81%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="List集合的Stream流处理"><a href="#List集合的Stream流处理" class="headerlink" title="List集合的Stream流处理"></a>List集合的Stream流处理</h3><ul><li>首先是根据每年的数据生成一张包含各种信息的统计表，就是每年可能有不同的大指标而大指标之下又会分成1，2，3等等很多小指标，这些小指标都会分别存入数据库中（无序）</li><li>使用下面这种方式来将每个小指标根据大指标来排一下序</li><li><img src="/2022/11/10/List%E9%9B%86%E5%90%88%E7%9A%84Stream%E6%B5%81%E5%A4%84%E7%90%86/1.png" class title="方法"></li><li>一般适用于list集合，主要作用是模拟SQL查询，从集合中查询想要的数据，filter里面的参数是指集合里面的每一项</li><li>之后还需要将大指标相同的数据，把大指标合并成为一个渲染到表格中，就需要去重</li><li><img src="/2022/11/10/List%E9%9B%86%E5%90%88%E7%9A%84Stream%E6%B5%81%E5%A4%84%E7%90%86/2.png" class title="方法"></li><li>而上图中的OneName就相当于是大指标，来按照这个去重保存到<code>same_one_list</code>中</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件导出@Excel</title>
    <link href="/2022/11/10/%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA-Excel/"/>
    <url>/2022/11/10/%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA-Excel/</url>
    
    <content type="html"><![CDATA[<h3 id="文件导出的-Excel"><a href="#文件导出的-Excel" class="headerlink" title="文件导出的@Excel"></a>文件导出的@Excel</h3><ul><li>是个小问题</li><li>在导出文件的时候一直会报一个<code>index:0</code>的错误；搜索也找不到解决办法</li><li>之后又搜索了很多文件导出的例子才发现，需要在实体类中加入注解<code>@Excel自定义注解</code></li><li><code>@Excel</code> 作用到filed上面，是对Excel列的一个描述</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>layui日期的使用以及动态更新table和form</title>
    <link href="/2022/11/09/layui%E6%97%A5%E6%9C%9F%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0table%E5%92%8Cform/"/>
    <url>/2022/11/09/layui%E6%97%A5%E6%9C%9F%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0table%E5%92%8Cform/</url>
    
    <content type="html"><![CDATA[<h3 id="layui日期的使用"><a href="#layui日期的使用" class="headerlink" title="layui日期的使用"></a>layui日期的使用</h3><ul><li>在使用日期选择框的时候一直报下面这个错</li><li><img src="/2022/11/09/layui%E6%97%A5%E6%9C%9F%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0table%E5%92%8Cform/1.png" class title="错误"></li><li>原因：没有加载模块，因为<code>layui</code>有很多模块，如果没有使用<code>layui.all.js</code>那么就需要在使用的时候用<code>layui.use</code>加载模块<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">layui.<span class="hljs-keyword">use</span>([<span class="hljs-string">&#x27;laydate&#x27;</span>],<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="动态的更新select下拉框"><a href="#动态的更新select下拉框" class="headerlink" title="动态的更新select下拉框"></a>动态的更新select下拉框</h3><ul><li>在layui中的下拉框需要分开不同两年的数据，举个栗子：也就是选择18年后，相应的班级下拉框显示18级，年份选择19级，班级下拉框显示19级，数据库已经由不同年份分开</li><li><strong>解决办法</strong>：首先使用laydate来选择不同的年份，选择完成后，给year赋值现在选择的年份，之后调用动态配置下拉框的方法</li><li><img src="/2022/11/09/layui%E6%97%A5%E6%9C%9F%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0table%E5%92%8Cform/2.png" class title="解决办法"></li><li>之后还会遇到 option堆叠的问题，也就是先查18年的数据，再查19年的数据，下拉框会同时显示18.19的数据</li><li><strong>解决办法</strong></li><li><img src="/2022/11/09/layui%E6%97%A5%E6%9C%9F%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0table%E5%92%8Cform/3.png" class title="解决办法"></li><li>同样，非动态但是有判断条件的控制，需要在后面加上<code>form.render();</code>才能实现</li></ul><hr><h3 id="动态的更新table"><a href="#动态的更新table" class="headerlink" title="动态的更新table"></a>动态的更新table</h3><ul><li><img src="/2022/11/09/layui%E6%97%A5%E6%9C%9F%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0table%E5%92%8Cform/4.png" class title="问题"></li><li>确实出现这个问题但是对我好像不能直接套用；因为我首先会根据年份·搜索首页面，并且之后还会用年份固定条件搜索，所以说 我在搜索的方法里面加了</li><li><img src="/2022/11/09/layui%E6%97%A5%E6%9C%9F%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0table%E5%92%8Cform/5.png" class title="解决办法"></li><li>这个方法；<br>之后调用渲染表格的方法，就可以实现了</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>需要修改多条明细</title>
    <link href="/2022/11/06/%E9%9C%80%E8%A6%81%E4%BF%AE%E6%94%B9%E5%A4%9A%E6%9D%A1%E6%98%8E%E7%BB%86/"/>
    <url>/2022/11/06/%E9%9C%80%E8%A6%81%E4%BF%AE%E6%94%B9%E5%A4%9A%E6%9D%A1%E6%98%8E%E7%BB%86/</url>
    
    <content type="html"><![CDATA[<h5 id="同时修改多条明细"><a href="#同时修改多条明细" class="headerlink" title="同时修改多条明细"></a>同时修改多条明细</h5><p>HashSet 是一个没有重复元素的集合。<br>它是由HashMap实现的，不保证元素的顺序，而且HashSet允许使用 null 元素。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">Set&lt;<span class="hljs-keyword">String</span>&gt;ids=<span class="hljs-keyword">new</span><span class="hljs-type">HashSet</span>&lt;&gt;();<span class="hljs-comment">//</span><br><span class="hljs-keyword">String</span>[]transFactor=&#123;&#125;;<br><br></code></pre></td></tr></table></figure><p>我们经常将数据放到集合中进行操作，因为java集合给我们提供了大量的方法函数使用，大大减少了我们的开发工作量。但是有时候我们需要的却是基础数据类型，比如数组，此时我们将集合类型转成数组。虽然集合类有个toArray()方法，但是返回的是Object[]类型，通常情况下我们可以考虑使用stream流进行转.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">target<span class="hljs-selector-class">.forEach</span>(t-&gt;&#123;<br>    ids<span class="hljs-selector-class">.add</span>(t<span class="hljs-selector-class">.getId</span>())<br>&#125;)<br><br>lineWrapper<span class="hljs-selector-class">.in</span>(<span class="hljs-string">&quot;target_id&quot;</span>,ids<span class="hljs-selector-class">.toArray</span>(transFactor))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>layui</title>
    <link href="/2022/11/05/layui/"/>
    <url>/2022/11/05/layui/</url>
    
    <content type="html"><![CDATA[<h5 id="layui的渲染方式"><a href="#layui的渲染方式" class="headerlink" title="layui的渲染方式"></a>layui的渲染方式</h5><ol><li>用的最多的是访问url,之后会将数据渲染到表格中。。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">table.<span class="hljs-title function_ invoke__">render</span>(&#123;<br>    <span class="hljs-attr">elem</span>: <span class="hljs-string">&#x27;#demo&#x27;</span><br>    ,<span class="hljs-attr">height</span>: <span class="hljs-number">312</span><br>    ,<span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;../../demo/table/user/-page=1&amp;limit=30.js&#x27;</span> //数据接口<br>    ,<span class="hljs-attr">page</span>: <span class="hljs-literal">true</span> //开启分页<br>    ,<span class="hljs-attr">cols</span>: [[ //表头<br>      &#123;<span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;ID&#x27;</span>, <span class="hljs-attr">width</span>:<span class="hljs-number">80</span>, <span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">fixed</span>: <span class="hljs-string">&#x27;left&#x27;</span>&#125;<br>      ,&#123;<span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;用户名&#x27;</span>, <span class="hljs-attr">width</span>:<span class="hljs-number">80</span>&#125;<br>      ,&#123;<span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;sex&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;性别&#x27;</span>, <span class="hljs-attr">width</span>:<span class="hljs-number">80</span>, <span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span>&#125;<br>      ,&#123;<span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;城市&#x27;</span>, <span class="hljs-attr">width</span>:<span class="hljs-number">80</span>&#125; <br>    ]]<br>  &#125;);<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Github博客搭建教程</title>
    <link href="/2022/11/03/%E9%99%88%E4%BD%B3%E4%B9%90%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/11/03/%E9%99%88%E4%BD%B3%E4%B9%90%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h5 id="博客基于Hexo。Hexo是高效的静态网站生成框架，它基于Node-js，快速，简单且功能强大，是搭建博客的首选框架。"><a href="#博客基于Hexo。Hexo是高效的静态网站生成框架，它基于Node-js，快速，简单且功能强大，是搭建博客的首选框架。" class="headerlink" title="博客基于Hexo。Hexo是高效的静态网站生成框架，它基于Node.js，快速，简单且功能强大，是搭建博客的首选框架。"></a>博客基于Hexo。Hexo是高效的静态网站生成框架，它基于Node.js，快速，简单且功能强大，是搭建博客的首选框架。</h5><ol><li>搭建Hexo<ol><li>安装git：<ol><li>为了把本地的网页文件上传到github上面去，需要用到工具———Git[下载地址]。Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git教程(学习教程，不是安装教程)</li><li>安装完成后在命令提示符中输入<code>git --version</code>来查看一下版本验证是否安装成功</li></ol></li><li>安装node.js：Hexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。<ol><li>官网下载 <a href="http://nodejs.cn/">node.js官网</a></li><li>这里要特别注意,这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。 安装的文件夹【D:\nodejs】下创建两个文件夹【node_global】及【node_cache】</li><li>安装时有个问题在下面会提到</li><li>打开命令行终端，输入: <code>node-v</code>、<code>npm-v</code> 检查是否安装成功</li></ol></li><li>安装Hexo<ol><li>创建一个文件夹来存放自己的博客文件，然后cd到这个文件夹下面，或者在这个文件夹下面直接右击 git bash打开</li><li>输入 <code>npm install -g hexo-cli</code> 安装hexo</li><li>完成后<code>hexo -v</code> 验证是否成功</li><li><strong>遇到的问题 ：使用npm安装时是全局安装，所以在上面安装node时需要特别注意配置环境变量；我在环境变量配置了使用nvm的node.js的位置，但是却没有将全模块所在路径和缓存路径放在我node.js安装的文件夹中，所以就会报错；‘hexo’ 不是内部或外部命令，也不是可运行的程序</strong></li><li>初始化：接下来初始化一下hexo,即初始化我们的网站，进入我们主题根目录Hexo，输入<code>hexo init</code>初始化文件夹</li><li>输入hexo g生成静态网页，然后输入hexo s打开本地服务器，按ctrl+c关闭本地服务器.</li></ol></li><li>注册github创建个人账号<ol><li>打开<a href="https://github.com/%EF%BC%8C%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93New">https://github.com/，新建一个项目仓库New</a> repository，如下所示；存储库要按照下面这个格式只有这样，将来要部署到GitHub page的时候，才会被识别</li></ol></li><li>生成SSH添加到gitHub上<ol><li>第一次使用git后需要将用户名和邮箱初始化，在之前存放博客创建的文件夹中，右键打开 git bash输入</li><li><code>git config -- global user.name &quot;yourname&quot;  git config -- global user.email &quot;email&quot; </code></li><li>用下面的语句检查一下：</li><li><code> git config user.name  git config user.email</code></li><li>然后创建ssh:ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上</li><li><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code> 自己git的邮箱，一直回车</li><li>这个时候生成了.ssh文件。在电脑中找到，或者git bash中输入<code>cat ~/.ssh/id_rsa.pub</code></li><li>打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便取一个都可以，把你的id_rsa.pub里面的信息复制进去。</li><li>在git bash输入 <code>ssh -T git@github.com</code>，出现你的用户名，那就成功了</li></ol></li><li>将hexo部署到github上<ol><li>将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。修改最后一行的配置</li><li>其中 <code>hexo clean</code>清除了之前生成的东西，也可以不加。 <code>hexo generate</code>生成静态文章，可以用 <code>hexo g</code>缩写 ，<code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</li><li>过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到博客了</li></ol></li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
